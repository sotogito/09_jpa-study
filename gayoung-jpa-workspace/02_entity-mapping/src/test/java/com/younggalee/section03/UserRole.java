package com.younggalee.section03;

/*
    ## enum ##
    1. 열거형(Enumerated) 데이터 타입
    2. 서로 관련되어있는 상수들의 집합을 정의할 수 있게 해주는 특별한 타입
    3. 미리 정해진 값(상수)들만을 변수에 할당할 수 있도록 제한
    4. 특징
        1) 상수 집합 정의 : 일정 범위 내에서만 가질 수 있는 값을 명확하게 표현
        2) 타입 안정성 : enum으로 정해놓은 값만 들어올 수 있음, 다르 값이 들어올 때 컴파일 에러 발생
        3) 클래스처럼 동작 : 변수, 메소드, 생성자도 가질 수 있음
        4) 가독성 및 유지보수 향상 : 관련 상수들을 한 곳에 모아둠, 새로운 상수 추가 및 수정 손쉬움
    5. 주요 메소드
        1) values() : 모든 enum 상수를 배열로 반환
        2) valueOf(String name) : name에 해당하는 enum 상수 반환
        3) ordinal() : 상수 순서(0부터) 반환  //나열되어있는 순번대로
        4) name() : 상수 이름 반환



    ## @Enumerated ##
    1. Enum 타입 매핑을 위해 사용
    2. 종류
        1) EnumType.ORDINAL : 상수 정의 순서로 매핑함 (0부터 시작), 생략시 기본값
        2) EnumType.STRING : 상수명을 문자열로 매핑함
    3. 종류별 장단점
        1 ) 디비에 저장되는 데이터의 크기가 작음. 단, 이미 저장된 enum의 순서를 변경할 수 없음
        2 ) 디비에 저장되는 데이터의 크기가 큼. 단, 저장된 enum의 순서가 바뀌거나 새로운 enum이 추가되어도 안전함
   */

public enum UserRole {
    ADMIN,USER    // 나열된 내용이 달라지면 나열 순서가 변경될 수 있는데 이때 디비에 재반영이 안됨
    // 따라서 순서로 저장시키는거 보다는 상수명으로 저장시키는 것이 더 좋음.
}
