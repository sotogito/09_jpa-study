## Association Mapping ##
1. Entity 클래스 간의 관계를 매핑하는 걸 의미
2. 이를 통해 객체를 이용하여 DB 테이블 간의 관계를 매핑할 수 있음
3. 다중성에 의한 분류
   → 연관관계가 있는 객체 관계에서 실제로 연관을 가지는 객체 수에 따라 분류됨
   1) M:1 (ManyToOne)
   2) 1:M (OneToMany)
   3) 1:1 (OneToOne)
   4) M:N (ManyToMany)
4. 방향에 따른 분류
   → 테이블의 연관 관계는 외래키를 이용하여 양방향 연관 관계의 특징을 가짐
   → 참조에 의한 객체의 연관 관계는 단방향
   → 객체간의 연관 관계를 양방향으로 만들고 싶을 경우 반대 쪽에서도 필드를 추가해서 참조를 보관하면 됨
   → 하지만 엄밀히 양방향 관계가 아닌 단방향 관계 2개로 볼 수 있음
   1) 단방향 연관 관계
   2) 양방향 연관 관계
5. 연관 관계의 엔티티 조회 방법
   1) 객체 그래프 탐색(객체 연관 관계를 사용한 조회)
   2) 객체 지향 쿼리(JPQL)
       → Java Persistence Query Language 약자
       → 객체 지향 모델에 맞게 작성된 쿼리를 통해 엔티티 객체를 대상으로 검색
       → 검색 결과를 토대로 객체를 조작할 수 있음
       → join문법이 sql과 다소 차이가 있지만 직접 쿼리를 작성할 수 있는 문법을 제공
       → 주의할 점: from절에 기술할 테이블명은 엔티티명으로, 조회할 컬럼명은 엔티티의 필드명으로 작성


## @JoinColumn ##
1. 연관 관계 매핑시 사용되는 어노테이션
2. 연관 관계 형성을 위한 필드에 부여 (주로 연관관계의 주인(owner) 엔티티의 필드(주로 fk컬럼)에 부여)
3. 주요 속성
   1) name             : 해당 엔티티가 참조하는 테이블의 컬럼명
   2) table            : 해당 엔티티가 참조하는 테이블명
   3) nullable         : null 허용 여부 지정
   4) unique           : 유일성 제약조건 여부 지정
   5) columnDefinition : 해당 참조 컬럼(외래키)에 대한 SQL DDL을 직접 작성할 수 있음


## ManyToOne AssociationMapping ##
1. 다수의 엔티티가 하나의 엔티티를 참조하는 상황에 사용
   ex) 다수의 엔티티(Menu) - 하나의 엔티티(Category)
           Many(Menu)      -       One(Category)
2. @ManyToOne : 다대일 연관 관계에서 사용되는 어노테이션
   1) cascade  : 연관된 엔티티에 대한 영속성 전이 설정
   2) fetch    : 연관된 엔티티를 로딩하는 전략 설정
   3) optional : 연관된 엔티티가 필수인지 선택적인지를 설정 (default:true(null이여도됨))
                 즉, fk 컬럼의 not null 제약조건과 연관 있음


## OneToMany AssociationMapping ##
1. 하나의 엔티티가 다수의 엔티티를 참조하는 상황에 사용
   ex) 하나의 엔티티(Category) - 다수의 엔티티(Menu)
            One(Category)      -    Many(Menu)
2. @OneToMany : 일대다 연관 관계에서 사용되는 어노테이션
   1) cascade  : 연관된 엔티티에 대한 영속성 전이 설정
   2) fetch    : 연관된 엔티티를 로딩하는 전략 설정